package com.alan.clients.module.impl.exploit.disabler;

import com.alan.clients.Client;
import com.alan.clients.module.impl.exploit.Disabler;
import com.alan.clients.module.impl.player.Scaffold;
import com.alan.clients.newevent.Listener;
import com.alan.clients.newevent.annotations.EventLink;
import com.alan.clients.newevent.impl.other.WorldChangeEvent;
import com.alan.clients.newevent.impl.packet.PacketReceiveEvent;
import com.alan.clients.newevent.impl.packet.PacketSendEvent;
import com.alan.clients.util.interfaces.InstanceAccess;
import com.alan.clients.util.math.MathUtil;
import com.alan.clients.util.packet.PacketUtil;
import com.alan.clients.value.Mode;
import com.alan.clients.value.impl.BooleanValue;
import lombok.Getter;
import net.minecraft.client.gui.GuiDownloadTerrain;
import net.minecraft.item.ItemFood;
import net.minecraft.item.ItemPotion;
import net.minecraft.network.INetHandler;
import net.minecraft.network.Packet;
import net.minecraft.network.login.server.S00PacketDisconnect;
import net.minecraft.network.login.server.S01PacketEncryptionRequest;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.*;
import net.minecraft.network.status.server.S00PacketServerInfo;
import net.minecraft.network.status.server.S01PacketPong;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.viamcp.ViaMCP;

import java.util.concurrent.ConcurrentLinkedDeque;
import java.util.concurrent.CopyOnWriteArrayList;

public class GrimACDisabler extends Mode<Disabler> {
    public GrimACDisabler(String name, Disabler parent) {
        super(name, parent);
        INSTANCE = this;
    }

    public final BooleanValue expand = new BooleanValue("Expand", this, false);
    private boolean lastResult = false;

    @Getter
    private CopyOnWriteArrayList<Packet<INetHandler>> storedPackets = new CopyOnWriteArrayList<>();
    @Getter
    private ConcurrentLinkedDeque<Integer> pingPackets = new ConcurrentLinkedDeque<>();

    private int slot;

    public boolean getGrimPost() {
        boolean result = getParent().isEnabled() && getParent().grimac.getValue() && InstanceAccess.mc.thePlayer != null && InstanceAccess.mc.thePlayer.isEntityAlive() && InstanceAccess.mc.thePlayer.ticksExisted >= 10 && !(InstanceAccess.mc.currentScreen instanceof GuiDownloadTerrain) && !getModule(Scaffold.class).isEnabled();

        if (InstanceAccess.mc.thePlayer != null && InstanceAccess.mc.thePlayer.getHeldItem() != null && (InstanceAccess.mc.thePlayer.getHeldItem().getItem() instanceof ItemFood || (InstanceAccess.mc.thePlayer.getHeldItem().getItem() instanceof ItemPotion && !ItemPotion.isSplash(InstanceAccess.mc.thePlayer.getHeldItem().getMetadata())))) {
            result = false;
        }

        if (lastResult && !result) {
            lastResult = false;
            InstanceAccess.mc.addScheduledTask(this::processPackets);
        }
        lastResult = result;
        return result;
    }

    @EventLink()
    private final Listener<WorldChangeEvent> onWorld = event -> {
        slot = -1;
    };
    public static GrimACDisabler INSTANCE;
    @EventLink
    private final Listener<PacketSendEvent> onPacketSend = event -> {
        if (isNull()) return;
        final Packet<?> packet = event.getPacket();
        if (expand.getValue()) {
            expandPacket(event, packet);
        }
        if (packet instanceof C07PacketPlayerDigging) {
            if (((C07PacketPlayerDigging) packet).getStatus() == C07PacketPlayerDigging.Action.RELEASE_USE_ITEM && ViaMCP.getInstance().getVersion() >= 47) {
                if (((C07PacketPlayerDigging) packet).getFacing() != EnumFacing.DOWN
                        || ((C07PacketPlayerDigging) packet).getPosition().getX() != 0
                        || ((C07PacketPlayerDigging) packet).getPosition().getY() != 0
                        || ((C07PacketPlayerDigging) packet).getPosition().getZ() != 0) {
                    ((C07PacketPlayerDigging) packet).setFacing(EnumFacing.DOWN);
                    ((C07PacketPlayerDigging) packet).setPosition(BlockPos.ORIGIN);
                }
            }
        }
        if (packet instanceof C03PacketPlayer.C06PacketPlayerPosLook ) {
            if (((C03PacketPlayer)packet).getPitch() > 90 || ((C03PacketPlayer)packet).getPitch() < -90) {
                ((C03PacketPlayer)packet).setPitch((float) MathUtil.clamp(((C03PacketPlayer)packet).getPitch(), -90, 90));
            }
        }
        handlePacketHeldItemChange(event);
    };

    private void expandPacket(PacketSendEvent event, Packet<?> packet) {
        if (packet instanceof C08PacketPlayerBlockPlacement && ((C08PacketPlayerBlockPlacement) packet).getPlacedBlockDirection() >= 0 && ((C08PacketPlayerBlockPlacement) packet).getPlacedBlockDirection() <= 5) {
            event.setCancelled(true);
            expandAndSendBlockPlacementPacket((C08PacketPlayerBlockPlacement) packet);
        }
        if (packet instanceof C13PacketPlayerAbilities) {
            handleFlyingAbilities((C13PacketPlayerAbilities) packet);
        }
    }

    private void expandAndSendBlockPlacementPacket(C08PacketPlayerBlockPlacement packet) {
        PacketUtil.send(new C08PacketPlayerBlockPlacement(
                packet.getPosition(),
                6 + packet.getPlacedBlockDirection() * 7,
                packet.getStack(),
                packet.getPlacedBlockOffsetX(),
                packet.getPlacedBlockOffsetY(),
                packet.getPlacedBlockOffsetZ()
        ));
    }

    private void handleFlyingAbilities(C13PacketPlayerAbilities packet) {
        if (packet.isFlying() && !InstanceAccess.mc.thePlayer.capabilities.isFlying) {
            packet.setFlying(false);
        }
    }

    private void handlePacketHeldItemChange(PacketSendEvent event) {
        if (event.getPacket() instanceof C09PacketHeldItemChange) {
            int slotId = ((C09PacketHeldItemChange) event.getPacket()).getSlotId();
            handleSlotIdChange(event, slotId);
        }
    }

    private void handleSlotIdChange(PacketSendEvent event, int slotId) {
        if (slot == slotId) {
            event.setCancelled();
        } else {
            slot = slotId;
        }
    }


    public boolean grimPostDelay(Packet<?> packet) {
        if (InstanceAccess.mc.thePlayer == null) {
            return false;
        }
        if (InstanceAccess.mc.currentScreen instanceof GuiDownloadTerrain) {
            return false;
        }
        if (packet instanceof S00PacketServerInfo) {
            return false;
        }
        if (packet instanceof S01PacketEncryptionRequest) {
            return false;
        }
        if (packet instanceof S38PacketPlayerListItem) {
            return false;
        }
        if (packet instanceof S00PacketDisconnect) {
            return false;
        }
        if (packet instanceof S21PacketChunkData) {
            return false;
        }
        if (packet instanceof S01PacketPong) {
            return false;
        }
        if (packet instanceof S44PacketWorldBorder) {
            return false;
        }
        if (packet instanceof S01PacketJoinGame) {
            return false;
        }
        if (packet instanceof S19PacketEntityHeadLook) {
            return false;
        }
        if (packet instanceof S3EPacketTeams) {
            return false;
        }
        if (packet instanceof S02PacketChat) {
            return false;
        }
        if (packet instanceof S2FPacketSetSlot) {
            return false;
        }
        if (packet instanceof S1CPacketEntityMetadata) {
            return false;
        }
        if (packet instanceof S20PacketEntityProperties) {
            return false;
        }
        if (packet instanceof S35PacketUpdateTileEntity) {
            return false;
        }
        if (packet instanceof S03PacketTimeUpdate) {
            return false;
        }
        if (packet instanceof S47PacketPlayerListHeaderFooter) {
            return false;
        }
        if (packet instanceof S12PacketEntityVelocity) {
            S12PacketEntityVelocity sPacketEntityVelocity = (S12PacketEntityVelocity) packet;
            return sPacketEntityVelocity.getEntityID() == InstanceAccess.mc.thePlayer.getEntityId();
        }
        return packet instanceof S27PacketExplosion
                || packet instanceof S32PacketConfirmTransaction
                || packet instanceof S08PacketPlayerPosLook
                //  || packet instanceof SPacketEntityTeleport
                //  || packet instanceof SPacketEntityStatus
                || packet instanceof S04PacketEntityEquipment
                || packet instanceof S23PacketBlockChange
                || packet instanceof S22PacketMultiBlockChange
                //   || packet instanceof SPacketDestroyEntities
                || packet instanceof S00PacketKeepAlive
                || packet instanceof S06PacketUpdateHealth
                || packet instanceof S14PacketEntity
                || packet instanceof S0FPacketSpawnMob
                || packet instanceof S3FPacketCustomPayload;
    }


    public void processPackets() {
        if (!storedPackets.isEmpty()) {
            for (Packet<INetHandler> packet : storedPackets) {
                PacketReceiveEvent event = new PacketReceiveEvent(packet);

                Client.INSTANCE.getEventBus().handle(event);

                if (!event.isCancelled()) {
                    packet.processPacket(InstanceAccess.mc.getNetHandler());
                }
            }
            storedPackets.clear();
        }
    }

    public void fixC0F(C0FPacketConfirmTransaction packet) {
        int id = packet.getUid();
        if (id >= 0 || pingPackets.isEmpty()) {
            PacketUtil.sendNoEvent(packet);
            return;
        }
        do {
            int current = pingPackets.getFirst();
            PacketUtil.sendNoEvent(new C0FPacketConfirmTransaction(packet.getWindowId(), (short) current, true));
            pingPackets.pollFirst();
            if (current == id) {
                return;
            }
        } while (!pingPackets.isEmpty());
    }
}
